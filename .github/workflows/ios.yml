name: iOS starter workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
#   iOS:
#     name: ${{ matrix.name }}
#     runs-on: ${{ matrix.runsOn }}
#     env:
#       DEVELOPER_DIR: "/Applications/${{ matrix.xcode }}.app/Contents/Developer"
#     timeout-minutes: 10
#     strategy:
#       fail-fast: false
#       matrix:
#         include:
#           - destination: "OS=17.0,name=iPhone 14 Pro"
#             name: "iOS 17.0"
#             xcode: "Xcode_15.0"
#             runsOn: firebreak
#     steps:
#       - uses: actions/checkout@v4
#       - name: Install SwiftLint
#         run: brew install swiftlint
#       - name: ${{ matrix.name }}
#         run: set -o pipefail && env NSUnbufferedIO=YES xcodebuild -project "WeiBainingAI.xcodeproj" -scheme "Alamofire iOS" -destination "${{ matrix.destination }}" clean test 2>&1 | xcpretty
        
  build:
    name: Build default scheme using any available iPhone simulator
    runs-on: macos-latest
    strategy:
      matrix:
        # destination: [
        #   'iOS Simulator,name=iPhone 15 Pro Max'
        # ]
        swift-version: [5.0]
        
    steps:
      - name: Checkout
        uses: actions/checkout@v3
   
      - name: Build
        run: xcodebuild -scheme WeiBainingAI -sdk iphonesimulator -destination 'platform=iOS Simulator,name=iPhone 15 Pro Max' build

      # - name: Set Default Scheme
      #   run: |
      #     scheme_list=$(xcodebuild -list -json)
      #     default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
      #     echo $default | cat >default
      #     echo Using default scheme: $default
      # - name: Build
      #   env:
      #     scheme: ${{ 'default' }}
      #     platform: ${{ 'iOS Simulator' }}
      #   run: |
      #     # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
      #     device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
      #     if [ $scheme = default ]; then scheme=$(cat default); fi
      #     if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
      #     file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
      #     xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
